{
    "$schema": "http://json-schema.org/schema#",
    "$id": "http://github.com/tapis-project/tapisflask/schemas/configschema.json",
    "type": "object",
    "additionalProperties": true,
    "required":[
      "service_name",
      "version",
      "log_level",
      "rabbitmq_uri",
      "global_tenant_object",
      "global_site_object",
      "spawner_host_id",
      "nfs_base_path"
    ],
    "properties": {
      "python_framework_type": {
        "type": "string",
        "default": "fastapi",
        "description": "The framework this service will use. e.g. Flask, Django, FastApi, etc."
      },
      "kubernetes_namespace": {
        "type": "string",
        "description": "The namespace to find traefik config and pods. Relevant to health so that it can modify config in realtime."
      },
      "kubernetes_deploy_namespace": {
        "type": "string",
        "description": "The namespace for kubernetes to create workers and pods in. Only relevant to spawner and health."
      },
      "rabbitmq_uri": {
        "type": "string",
        "description": "URI for rabbitMQ."
      },
      "pvc_storage_class_name": {
        "type": "string",
        "description": "Which kubernetes storage class to use when creating default persistent volume claims."
      },
      "default_pod_cpu_limit": {
        "type": "integer",
        "description": "Default CPU allocation pod is allowed to use. In millicpus (m). 1000 = 1 cpu.",
        "default": 2000
      },
      "default_pod_cpu_request": {
        "type": "integer",
        "description": "Default CPU allocation pod requests at startup. In millicpus (m). 1000 = 1 cpu.",
        "default": 250
      },
      "maximum_pod_cpu_val":{
        "type": "integer",
        "description": "Maximum CPU allocation pod is allowed to have as limit or request. In millicpus (m). 1000 = 1 cpu.",
        "default": 6000
      },
      "minimum_pod_cpu_val":{
        "type": "integer",
        "description": "Minimum CPU allocation pod is allowed to have as limit or request. In millicpus (m). 1000 = 1 cpu.",
        "default": 250
      },
      "default_pod_mem_limit": {
        "type": "integer",
        "description": "Default memory allocation pod is allowed to use. In megabytes (Mi).",
        "default": 3072
      },
      "default_pod_mem_request": {
        "type": "integer",
        "description": "Default memory allocation pod requests at startup. In megabytes (Mi)",
        "default": 256
      },
      "maximum_pod_mem_val":{
        "type": "integer",
        "description": "Maximum memory allocation pod is allowed to have as limit or request. In megabytes (Mi)",
        "default": 12288
      },
      "minimum_pod_mem_val":{
        "type": "integer",
        "description": "Minimum memory allocation pod is allowed to have as limit or request. In megabytes (Mi)",
        "default": 256
      },
      "spawner_host_id": {
        "type": "integer",
        "description": "Unique host_id for worker host. Each host should have at least one spawner and health check worker."
      },
      "test_abaco_service_password": {
        "type": "string",
        "description": "Abaco service password is required to run tests as it's able to generate tokens."
      },
      "image_allow_list": {
        "type": "array",
        "description": "Docker images that users are allowed to use.",
        "items": {
          "type": "string"
        }
      },
      "nfs_base_path": {
        "type": "string",
        "description": "Base path for nfs system root_dir. Should be /{base_path}/{tenant}/, tenant is added at runtime."
      },
      "global_tenant_object": {
        "type": "object",
        "description": "Object containing global parameters which tenants may overwrite at times.",
        "additionalProperties": false,
        "properties": {
          "log_ex": {
            "type": "integer",
            "description": "Default amount of time, in seconds, before a log is deleted from Mongo DB.",
            "default": 43200
          },
          "log_ex_limit": {
            "type": "integer",
            "description": "Ceiling for custom log_ex able to be set for a tenant."
          },
          "web_max_log_length": {
            "type": "integer",
            "description": "Max length (bytes) to store an actors exec's logs. Truncated otherwise. Cannot exceed max mongo doc len.",
            "default":1000000
          },    
          "use_tas_uid": {
            "type": "boolean",
            "description": "Whether or not to use tas for authentication.",
            "default": false
          },
          "actor_uid": {
            "type": "integer",
            "description": "If using uid and gid, what uid globally should be set as."
          },
          "actor_gid": {
            "type": "integer",
            "description": "If using uid and gid, what gid globally should be set as."
          },
          "default_token": {
            "type": "boolean",
            "description": "Default value for an actor's token attribute. Set globally.",
            "default": false
          },
          "generate_clients": {
            "type": "boolean",
            "description": "Whether or not to generate clients when creating workers.",
            "default": false
          },
          "actor_homedir":{
            "type":"string",
            "description": "Allows for specification regarding an actors homedir to use."
          },
          "global_mounts": {
            "type": "array",
            "description": "Global mounts.",
            "items": {
              "type": "string"
            }
          }
        },
        "oneOf": [
          {
            "properties": {
              "use_tas_uid": {
                "type": "boolean",
                "enum": [
                  true
                ]
              }
            },
            "required": [
              "use_tas_uid",
              "log_ex",
              "log_ex_limit"
            ]
          },
          {
            "required": [
              "actor_uid",
              "actor_gid",
              "log_ex",
              "log_ex_limit"
            ]
          },
          {
            "properties": {
              "use_tas_uid": {
                "type": "boolean",
                "enum": [
                  false,
                  null
                ]
              },
              "actor_gid": {
                "type":"integer",
                "enum": [
                  null
                ]
              },
              "actor_uid": {
                "type":"integer",
                "enum": [
                  null
                ]
              }
            },
            "required": [
              "log_ex",
              "log_ex_limit"
            ]
          }
        ]
      }
    },
    "patternProperties": {
      "^.*_tenant_object": {
        "type": "object",
        "description": "Object containing tenant based properties.",
        "additionalProperties": false,
        "properties": {
          "log_ex": {
            "type": "integer",
            "description": "Default amount of time, in seconds, before a log is deleted from Mongo DB."
          },
          "log_ex_limit": {
            "type": "integer",
            "description": "Ceiling for custom log_ex able to be set for a tenant."
          },
          "use_tas_uid": {
            "type": "boolean",
            "description": "Whether or not to use tas for authentication for tenant."
          },
          "actor_uid": {
            "type": "integer",
            "description": "If using uid and gid, what uid by tenant should be set as."
          },
          "actor_gid": {
            "type": "integer",
            "description": "If using uid and gid, what gid by tenant should be set as."
          },
          "default_token": {
            "type": "boolean",
            "description": "Default value for an actor's token attribute. Set per tenant."
          },
          "generate_clients": {
            "type": "boolean",
            "description": "Whether or not to generate clients when creating workers for this tenant."
          },
          "actor_homedir":{
            "type":"string",
            "description": "Allows for specification regarding an actors homedir to use for this tenant."
          },
          "global_mounts": {
            "type": "array",
            "description": "Global mounts for this tenant.",
            "items": {
              "type": "string"
            }
          }
        },
        "oneOf": [
          {
            "properties": {
              "use_tas_uid": {
                "type":"boolean",
                "enum": [
                  true
                ]
              }
            },
            "required": [
              "use_tas_uid",
              "log_ex",
              "log_ex_limit"
            ]
          },
          {
            "required": [
              "actor_uid",
              "actor_gid",
              "log_ex",
              "log_ex_limit"
            ]
          },
          {
            "properties": {
              "use_tas_uid": {
                "type":"boolean",
                "enum": [
                  false,
                  null
                ]
              },
              "actor_gid": {
                "type":"integer",
                "enum": [
                  null
                ]
              },
              "actor_uid": {
                "type":"integer",
                "enum": [
                  null
                ]
              }
            },
            "required": [
              "log_ex",
              "log_ex_limit"  
            ]
          }
        ]
      }
    }
  }