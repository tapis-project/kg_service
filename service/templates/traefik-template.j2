entryPoints:
  web:
    address: ":80"
    transport:
      respondingTimeouts:
        readTimeout: 10
  dash:
   address: ":8080"

http:
  middlewares:
    path-strip-v3:
      stripPrefix:
        prefixes:
         - "/v3"    
    dev-host-headers:
      headers:
        customRequestHeaders:
          host: "localhost:5000"
        customResponseHeaders:
          access-control-allow-origin: ""
          host: "localhost:5000"
    error-handler:
      errors:
        status:
          - "501-599"
        service: pods-service
        query: "/error-handler/{status}"

    {% for pname,  pdata in http_proxy_info.items() -%}
    {% if pdata.tapis_auth -%}
    tapis-auth-{{ pname }}:
      forwardAuth:
        address: {{ pdata.auth_url }}
        {% if pdata.tapis_auth_response_headers -%}
        authResponseHeaders:
          {% for header in pdata.tapis_auth_response_headers -%}
          - "{{ header }}"
          {% endfor %}
        {% endif -%}
#        addAuthCookiesToResponse:
#          - "X-TapisUsername"
#          - "X-Tapis-Token"
    {% endif -%}
    {% endfor %}

  routers:
    dashboard:
      rule: (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      service: api@internal

    pods-service:
      rule: "PathPrefix(`/v3/pods`)"
      middlewares:
       - "path-strip-v3"
       - "dev-host-headers"
       - "error-handler"
      service: pods-service

    {% for pname, pdata in http_proxy_info.items() -%}
    {{ pname }}:
      rule: "Host(`{{ pdata.url }}`)"
      {% if pdata.tapis_auth -%}
      middlewares:
       - "tapis-auth-{{ pname }}"
      {% endif -%}
      service: "{{ pname }}"
      tls:
        certResolver: tlsletsencrypt
    {% endfor %}

  services:
    pods-service:
      loadBalancer:
        servers:
         - url: http://pods-api:8000

    {% for pname, pdata in http_proxy_info.items() -%}
    {{ pname }}:
      loadBalancer:
        servers:
         - url: http://{{ pdata.k8_service }}:{{ pdata.routing_port }}
    {% endfor %}

{% if tcp_proxy_info or postgres_proxy_info -%}
tcp:
  routers:{% endif %}
    {% for pname, pdata in tcp_proxy_info.items() -%}
    {{ pname }}:
      rule: "HostSNI(`{{ pdata.url }}`)"
      service: "{{ pname }}"
      tls:
        certResolver: tlsletsencrypt
    {% endfor %}
    {% for pname, pdata in postgres_proxy_info.items() -%}
    {{ pname }}:
      rule: "HostSNI(`{{ pdata.url }}`)"
      service: "{{ pname }}"
      tls:
        certResolver: tlsletsencrypt
        passthrough: true
    {% endfor %}

  {% if tcp_proxy_info or postgres_proxy_info -%}
  services:{% endif %}
    {% for pname, pdata in tcp_proxy_info.items() -%}
    {{ pname }}:
      loadBalancer:
        servers:
         - address: {{ pdata.k8_service }}:{{ pdata.routing_port }}
    {% endfor %}
    {% for pname, pdata in postgres_proxy_info.items() -%}
    {{ pname }}:
      loadBalancer:
        servers:
         - address: {{ pdata.k8_service }}:{{ pdata.routing_port }}
    {% endfor %}
